# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP.NET Core service.

version: "3.4"

services:
  # researchuisource:
  #   image: researchuisource
  #   build:
  #     context: ./fe/research-ui
  #     dockerfile: Dockerfile
  #   ports:
  #     - 4200:4200

  graphservice:
    container_name: "graph"
    image: graph
    build:
      context: ./svc/external
      dockerfile: info.sarins.services.knowledge/Dockerfile
    depends_on:
      - ne04jservice

    ports:
      - 8082:80
      - 8444:443

  vaultservice:
    container_name: "vault"
    image: vault
    build:
      context: ./svc/external
      dockerfile: info.sarins.services.vault/Dockerfile
    depends_on:
      - postgreservice
    ports:
      - 8081:80
      - 8443:443

  keycloakservice:
    container_name: "keycloak"
    image: quay.io/keycloak/keycloak
    ports:
      - 8080:8080
    command: ["start-dev"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin

  ne04jservice:
    container_name: neo4j
    image: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/P@ssw0rd
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - ./.neo4j/data:/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1",
        ]

  postgreservice:
    container_name: postgresql
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=amlvaultdb
      - POSTGRES_USER=amluser
      - POSTGRES_PASSWORD=P@ssw0rd
    volumes:
      - ./.postgres/data:/var/lib/postgresql/

  minioservice:
    container_name: minio
    image: quay.io/minio/minio
    command: ["minio", "server", "--console-address", ":9090"]
    ports:
      - 9000:9000
      - 9090:9090
    environment:
      - MINIO_CONFIG_ENV_FILE=/etc/config.env
    volumes:
      - ./.minio/config:/etc/config.env
      - ./.minio/data:/data/minio
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
